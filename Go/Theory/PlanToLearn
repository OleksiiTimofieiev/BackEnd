- OOP in go
- working with interfaces
- reverse proxy
- architecture: https://www.youtube.com/watch?v=oL6JBUk6tj0
- CLI go
- gob
- hangling go errors practice
- effective go
- generics
- string, slice, map 
- apche vs nginx: otus highload
- common go errors
- session in web: what for and how
- gRPC
- streaming protocols in go
- worker pool in go
- highload architercture in go
- when to use each type of database: in memory/not in memory
- design patterns in go
- databases: effectivenes, specifications, course on itvdn as a basis
- profiling
- testing a web server
- templates
- errors in prod: typical ones check
- secure go code
- transactions/transactional behaviour
- gPRC on http 2.0
- system Design
- problems with DB
- databases
- check tooling
- reflection
- tracing
- templates
- sql injections
- cache misses, how cache works, cache contention
- cookie  
---
- Профилирования 
- БД: https://www.youtube.com/watch?v=iho3_zq4tik&list=PLrCZzMib1e9q-X5V9pTM6J0AemRWseM7I&index=6
- Error management 
- Scheduler: OTUS lectures
- garbage collector: OTUS lectures
- concurrency patterns
- docker compose // TODO: check docker todos
- Design Patterns in go
- Interfaces and casting
- Executor tracing
- Perfomance measurement
- Kafka: streams API
- context swich in Go
- Highload couroutines patterns
- Data structures 
- Testing
- Go-Kit
- memory model otus
- typical interview questions
- Rabbit-MQ and connected 
- Aws 
- kubernetes
- why we need code generation in go
- Project with microservices on docker aws kubernetes 
- Apache vs nginx == otus highload
- Code generation 
- Closures
- CAP theorem
- SQL vs NoSQL
- Очереди сообщений
- Docker compose
- Mongo / SQL in project 
- https://www.youtube.com/playlist?list=PLrCZzMib1e9q-X5V9pTM6J0AemRWseM7I
- gracefull shutdown with context
- Pool of coroutines 
- Покрытие тестами