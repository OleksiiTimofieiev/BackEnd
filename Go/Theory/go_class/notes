https://www.youtube.com/watch?v=HfCsfuVqpcM&list=PLoILbKo9rG3skRCj37Kn5Zj803hhiuRK6&index=39

Basic types: {
    - machine representation == RAM == more faster then Java and Python
    - go money for financial calculations
    - strict types, types have to be casted before any operation related to other type
    - boolean is not able to be converted to int or vice-versa
    - no pointer manipulation
    - Error() => nil or non-nil
    - initialized by zero or correspondent type during variable declaration: nil, zero, etc., all members get zeroed for aggregated types
}

Strings: {
    - byte == unit8
    - rune == int32
    - string == immutable sequence of characters
    - passed by reference
}

Array, Slice, Map {
    - [4]int => array
    - []int => slice
    - arrays are passed by value
    - slice has a descriptor which point to an adress in memory, len, capacity
    - slice: append function changes address of the slice
    - for Map => std creates hash table in background
    - Maps are passed by reference; no coping, updates are O.K.; type used for the key must have defined == & != (not slice, map or func)
    - capacity in Map not supported
    - Maps have a special two-result lookup function: ok, true || 0, false
    - nil is type; specifically -> zero type
    - 
}

Control statements, declaration, types: {
    - range 
    - outer: mark to exit the loop
    - switch case: cases break automatically
    - before main : func init() <= at the start of the package
    - _ operation
}

Input/Output: {
    -P/f/s...printf
    - bufio => buffer I/O scanners
    - io/ioutil => read entyre fyle to memory/writing out
    - strconv
}

Function, parameters, defer: {
    - first class objects
    - function withing a function is possible
    - formal -> actual parameters
    - array passed by cope, slice by reference
    - * => pass by reference
    - defer called before return
}

Closures: {
    - func that returns Function
    - return &b -> escape analysis -> will live beyond scope of the function
    - return of anonymous function
    - inner function gets a reference to outer arguments 
    - pass function as an argument
}

Structs, struct tags, JSON: {
    - type ... struct {...}
    - passed by value unless pointer passed
}

Reference and value semantics: {
    - pointer => shared, not copied
    - value => not shared, copied
    - pointers: smth that can be copied, huge size of an object, null,
    waitGroup, Mutex    
    - value: stack allocation

}

Error management: {
    - any concrete type with Error() string can represent an error
    - custom types may be implemented
}

Static analysis == Linting: {
    - format the code = go fmt
    - fix the imports = go imports
    - look for issues = go lint
    - code issues     = go vet
    - go const
    - gosec = security issues
    - ineffasign = ineffective assignments
    - gocyclo = 
    - deadcode, unsused, varcheck, unconvert
    - all in one == golangci-lint
    - pre-commit hook in system version control
}

Testing: {
    - *_test.go with TestXXXX function => go test ./...
    - tests are not to be run if code was not changed since last run
}