https://www.youtube.com/watch?v=wj0hUjRHkPs&list=PLoILbKo9rG3skRCj37Kn5Zj803hhiuRK6&index=9

Basic types: {
    - machine representation == RAM == more faster then Java and Python
    - go money for financial calculations
    - strict types, types have to be casted before any operation related to other type
    - boolean is not able to be converted to int or vice-versa
    - no pointer manipulation
    - Error() => nil or non-nil
    - initialized by zero or correspondent type during variable declaration: nil, zero, etc., all members get zeroed for aggregated types
}

Strings: {
    - byte == unit8
    - rune == int32
    - string == immutable sequence of characters
    - passed by reference
}

Array, Slice, Map {
    - [4]int => array
    - []int => slice
    - arrays are passed by value
    - slice has a descriptor which point to an adress in memory, len, capacity
    - slice: append function changes address of the slice
    - for Map => std creates hash table in background
    - Maps are passed by reference; no coping, updates are O.K.; type used for the key must have defined == & != (not slice, map or func)
    - capacity in Map not supported
    - Maps have a special two-result lookup function: ok, true || 0, false
    - nil is type; specifically -> zero type
}

Control statements, declaration, types: {
    - range 
    - outer: mark to exit the loop
    - switch case: cases break automatically
    - before main : func init() <= at the start of the package
    - _ operation
}

Input/Output: {
    -P/f/s...printf
    - bufio => buffer I/O scanners
    - io/ioutil => read entyre fyle to memory/writing out
    - strconv
}