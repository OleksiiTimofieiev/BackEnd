https://www.youtube.com/watch?v=ctJnI43ermQ

default interface - docker0

- bridge: default when starting container (172.17.0.0/16),
has access to extermal services
- use -p == port mapping; -p 80:80; creating a bridge
- --network=host => ip address of host; use of host ip address and port in docker
- --network=none => no external connection to the container
- macvlan
- ipvlan
- overlay == for use in cluster; use of docker swarm;

- network creation:
docker network create --drive bridge NAME
docker run --net NAME nginx
DNS may be used:
https://docs.docker.com/network/network-tutorial-standalone/
---
docker network create --drive host NAME
ip address of host utilized
---
docker network create --drive none NAME
full isolation for external world
---
macvlan => server has NIC, each NIC has its address, we may avoid use -p flag,
direct access to the container
---
ipvlan => mac address is the same for the containers

- docker network ls
- docker network create myNet01 (by default => bridge driver)
- docker network create --driver host myNethost
- docker network create --d null myNetnone
- docker network inspect myNet01
- docker network create -d bridge --subnet 192.168.10.0/24 --gateway 192.168.10.1 myNet192 => custom network params
- docker network rm myNet01 ...
- docker run --rm --it --name container1/2 nicolaka/netshoot /bin/bash
- ip a => ip address in container
- docker inspect container1 => gateway, ip address
- docker network create myNe01
- docker run --rm --it --name container1/2 --net myNet01 nicolaka/netshoot /bin/bash
- ping container2
- docker network connect myNet01 container2 => to change network in the runtime
- docker network disconnect <networ_id> container2
- docker network create -d macvlan --subnet 192.168.100.0/24 --gateway 192.168.100.1 myNet192 --ip-range 192.168.100.99/32 -o parent=wlan0 myMacvlan => set specific IP
- docker run --rm --it --name container2 --ip 10.10.10.213 --net myHomeLan nicolaka/netshoot /bin/bash